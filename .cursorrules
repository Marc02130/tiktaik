# SwiftUI Best Practices for iOS App Development

When generating code, finding bugs, or optimizing SwiftUI projects, follow these guidelines:

## General Guidelines

- You are an expert AI programming assistant focused on producing clear, readable SwiftUI code.
- Always use the latest version of XCTest, FireBase, SwiftUI and Swift (as of January/February 2025), and be familiar with the latest features and best practices.
- Provide accurate, factual, thoughtful answers, and excel at reasoning.
- Follow the product requirements carefully & to the letter.
- Think step-by-step - describe your plan for what to build in pseudocode, written out in great detail.
- Always confirm your understanding before writing code.
- Write correct, up-to-date, bug-free, fully functional, working, secure, performant, and efficient code.
- Prioritize readability over performance.
- Fully implement all requested functionality.
- Leave NO TODOs, placeholders, or missing pieces.
- Be concise. Minimize any other prose.
- If you think there might not be a correct answer, say so. 
- If you do not know the answer, say so.
- When fixing a bug:
  - No additional swift files should need to be created. 
  - If you don't have the files needed, please ask. 
  - All functionality in the code is needed. 
  - Only delete code, comments, and error handling if it is no longer needed due to the bug fix being implemented. 
  - Please explain any code, comment, or guard deletion. 
  - Modify or add code to fix the bug. 

## 1. State Management

- Use appropriate property wrappers and macros:
  - Annotate view models with `@Observable`, e.g. `@Observable final class MyModel`.
  - Do not use @State in the SwiftUI View for view model observation. Instead, use `let model: MyModel`.
  - For reference type state shared with a child view, pass the dependency to the constructor of the child view.
  - For value type state shared with a child view, use SwiftUI bindings if and only if the child needs write access to the state.
  - For value type state shared with a child view, pass the value if the child view only needs read access to the state.
  - Use an `@Environment` for state that should be shared throughout the entire app, or large pieces of the app.
  - Use `@State` only for local state that is managed by the view itself.

## 2. Performance Optimization

- Implement lazy loading for large lists or grids using `LazyVStack`, `LazyHStack`, or `LazyVGrid`.
- Optimize ForEach loops by using stable identifiers.

## 3. Reusable Components

- Implement custom view modifiers for shared styling and behavior.
- Use extensions to add reusable functionality to existing types.

## 4. Accessibility

- Add accessibility modifiers to all UI elements.
- Support Dynamic Type for text scaling.
- Provide clear accessibility labels and hints.

## 5. SwiftUI Lifecycle

- Use `@main` and `App` protocol for the app's entry point.
- Implement `Scene`s for managing app structure.
- Use appropriate view lifecycle methods like `onAppear` and `onDisappear`.

## 6. Data Flow

- Use the Observation framework (`@Observable`, `@State`, and `@Binding`) to build reactive views.
- Implement proper error handling and propagation.

## 7. Testing

- Write unit tests for ViewModels and business logic in the UnitTests folder.
- Implement UI tests for critical user flows in the UITests folder.
- Use Preview providers for rapid UI iteration and testing.
- do not modify app code for testing. modify the test files instead.

## 8. SwiftUI-specific Patterns

- Use `@Binding` for two-way data flow between parent and child views.
- Implement custom `PreferenceKey`s for child-to-parent communication.
- Utilize `@Environment` for dependency injection.

## 9. Code Style and Formatting

- Follow Swift style guidelines for naming conventions and code structure.
- Use SwiftLint or similar tools to enforce consistent code style.
- When debugging, add clear comments for all code changes:

  // DEBUG: Added to track password validation state
  print("Password length:", password.count)
  
  // DEBUG: Temporary fix for auth timing issue
  DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
      self.validateAuth()
  }
  
- Document any persistent debug code with clear explanations of why it's needed.

## 10. IDs
- Do not use creatorId. Always use userId. Creator is a property of a user.

# File Organization
/TIKtAIk
├── App/
├── Features/
├── Models/
├── Services/
├── Utils/
├── Views/
└── Tests/

# Testing Requirements
- Unit tests for business logic
- UI tests for critical flows
- Performance tests for video processing
- AI feature integration tests
- Error scenario coverage

# Error Handling
- Network errors
- AI processing failures
- Video processing issues
- Authentication errors
- Storage/Database errors

# Performance Requirements
- Video load time < 3 seconds
- AI response time < 2 seconds
- Smooth scrolling (60 fps)
- Efficient memory usage
- Battery optimization

# Security Requirements
- Secure user authentication
- Data encryption
- Safe API key storage
- Content moderation
- Privacy compliance

# When generating code, please:
1. Follow the documentation requirements above
2. Include error handling
3. Add appropriate tests
4. Consider performance implications
5. Follow iOS/Swift best practices
6. Include necessary imports

# Project Scope
Week 1: Basic video platform functionality
Week 2: AI feature integration
Focus on quality over quantity
Build vertically (complete features) rather than horizontally

{
  "rules": {
    "requireComments": true,
    "requireExamples": true,
    "commentStyle": {
      "functions": true,
      "classes": true,
      "properties": true,
      "imports": true
    },
    "importComments": {
      "required": true,
      "format": "// {path} - {purpose}"
    },
    "exampleFormat": {
      "includeUsage": true,
      "includeOutput": true
    },
    "importRules": {
      "requireLocationComments": true,
      "format": {
        "framework": "// Framework: {name}",
        "local": "// Local: {path}",
        "thirdParty": "// Package: {name} - {version}"
      }
    },
    "functionRules": {
      "required": true,
      "format": {
        "description": true,
        "parameters": true,
        "returns": true,
        "throws": true,
        "example": true
      },
      "template": {
        "header": [
          "/// {description}",
          "/// - Parameters:",
          "///   - {param}: {description}",
          "/// - Returns: {description}",
          "/// - Throws: {error types}",
          "/// Example:",
          "/// ```swift",
          "/// {example code}",
          "/// ```"
        ]
      }
    }
  }
}
